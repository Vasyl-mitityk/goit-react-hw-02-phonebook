{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","contactform","type","onSubmit","this","text","pattern","title","required","onChange","Component","ContactList","deleteId","Id","del","createList","contacts","map","contact","id","onClick","uuidv4","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","App","filter","formSubmitHandler","data","repeatControl","cur","includes","arrayCont","alert","elementDelete","arr","idContact","elem","deleteContactFromContactList","newArrAfterDel","filterData","filterArr","fArr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a4543685.chunk.js","sourcesContent":["import style from './ContactForm.module.css';\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n        this.setState({ [name]: value });\r\n        \r\n    };\r\n    \r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        let contactForAdd = { name: this.state.name, number: this.state.number };\r\n        this.props.onSubmitData(contactForAdd);\r\n\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n    };\r\n    render() {\r\n        return (\r\n            <div className={style.contactform}>\r\n                <form type=\"submit\" onSubmit={this.handleSubmit}>\r\n                    <label><span className={style.text}>Name</span>\r\n                        \r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            onChange={this.handleChange}\r\n                            value={this.state.name}\r\n                        />\r\n                    </label>\r\n                    <label><span className={style.text}>Number</span>\r\n                        <input\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                            required\r\n                            onChange={this.handleChange}\r\n                            value={this.state.number}\r\n                        />\r\n                    </label>\r\n\r\n                    <button type=\"submit\">Add contact</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmitData: PropTypes.func.isRequired,\r\n};\r\nexport default ContactForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass ContactList extends Component {\r\n    deleteId = Id => {\r\n        this.props.del(Id);\r\n    };\r\n    createList = () => {\r\n        return this.props.contacts.map(contact => {\r\n            return (\r\n                <li key={uuidv4()} id={contact.id}>\r\n                    {`${contact.name}: ${contact.number}`}\r\n                    <button\r\n                        data-id={contact.id}\r\n                        onClick={() => this.deleteId(contact.id)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <ul>{this.createList()}</ul>;\r\n    }\r\n}\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    del: PropTypes.func.isRequired,\r\n};\r\nContactList.defaultProps = {\r\n    contacts: [],\r\n};\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Filter extends Component {\r\n    setFilterValue = event => {\r\n        let value = event.currentTarget.value.toUpperCase();\r\n        this.props.setFilterToState(value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Find contacts by name</h4>\r\n                <input onChange={this.setFilterValue}></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFilter.propTypes = {\r\n    setFilterToState: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;","import React, { Component } from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = data => {\n    this.repeatControl(data);\n  };\n\n  repeatControl = data => {\n    let nameArray = [];\n    nameArray = this.state.contacts.map(cur => cur.name);\n    if (!nameArray.includes(data.name)) {\n      let arrayCont = [];\n      arrayCont = [\n        ...this.state.contacts,\n        { id: uuidv4(), name: data.name, number: data.number },\n      ];\n      return this.setState({ ...this.state, contacts: arrayCont });\n    } else {\n      alert(' Контакт вже є у телефонній книзі!!!');\n    }\n  };\n\n  elementDelete = (arr, idContact) => {\n    let newArr = arr.filter(elem => elem.id !== idContact);\n    return newArr;\n  };\n\n  deleteContactFromContactList = idContact => {\n    let newArrAfterDel = this.elementDelete(this.state.contacts, idContact);\n    this.setState({\n      ...this.state,\n      contacts: [...newArrAfterDel],\n    });\n  };\n\n  setFilterToState = filterData => {\n    this.setState({ ...this.state, filter: `${filterData}` });\n  };\n\n  filterArr = fArr => {\n    let newArr = fArr.filter(cur =>\n      cur.name.toUpperCase().includes(this.state.filter),\n    );\n    return newArr;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmitData={this.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.setFilterToState} />\n        <ContactList\n          contacts={this.filterArr(this.state.contacts)}\n          del={this.deleteContactFromContactList}\n        />\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__3xfDt\",\"text\":\"ContactForm_text__NkJDH\"};"],"sourceRoot":""}